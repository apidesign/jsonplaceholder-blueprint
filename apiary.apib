FORMAT: X-1A
HOST: https://www.google.com

# JSONPlaceholder Blueprint

### Available resources:
- **Posts:** http://jsonplaceholder.apiary.io/v1/posts/1
- **TODO** - Albums: http://jsonplaceholder.apiary.io/v1/albums/1
- **TODO** - Comments: http://jsonplaceholder.apiary.io/v1/comments/1
- **TODO** - Photos: http://jsonplaceholder.apiary.io/v1/photos/1
- **TODO** - Todos: http://jsonplaceholder.apiary.io/v1/todos/1
- **TODO** - Users: http://jsonplaceholder.apiary.io/v1/users/1

### Credits
Inspired by [JSONPlaceholder](https://github.com/typicode/jsonplaceholder)


# Group Posts

## /v1/posts

### GET
Retrieve Posts

    Sample Request:
    [GET] http://jsonplaceholder.apiary.io/v1/posts

+ Response 200 (application/json)

        [
          {
            "userId": 1,
            "id": 1,
            "title": "sunt aut facere repellat provident occaecati excepturi optio reprehenderit",
            "body": "quia et suscipit suscipit recusandae consequuntur expedita et cum reprehenderit molestiae ut ut quas totam nostrum rerum est autem sunt rem eveniet architecto"
          },
          {
            "userId": 1,
            "id": 2,
            "title": "qui est esse",
            "body": "est rerum tempore vitae sequi sint nihil reprehenderit dolor beatae ea dolores neque fugiat blanditiis voluptate porro vel nihil molestiae ut reiciendis qui aperiam non debitis possimus qui neque nisi nulla"
          },
          {
            "userId": 1,
            "id": 3,
            "title": "ea molestias quasi exercitationem repellat qui ipsa sit aut",
            "body": "et iusto sed quo iure voluptatem occaecati omnis eligendi aut ad voluptatem doloribus vel accusantium quis pariatur molestiae porro eius odio et labore et velit aut"
          }
        ]

### POST
Create a Post

    Sample Request:
    [POST] http://jsonplaceholder.apiary.io/v1/posts

+ Request (application/json)

        { "userId": 1, "title": "foo", "body": "bar"}

+ Response 201 (application/json)

        {
          "userId": 1,
          "id": 4,
          "title": "foo",
          "body": "bar"
        }


## /v1/posts/{id}

+ Parameters
    + id (required, integer, `4`) ... Post ID as numeric value

### GET
Retrieve a Post

    Sample Request:
    [GET] http://jsonplaceholder.apiary.io/v1/posts/4

+ Response 200 (application/json)

        {
            "userId": 1,
            "id": 4,
            "title": "quas laboriosam ea",
            "body": "earum inventore sapiente error nesciunt ut perferendis soluta suscipit dicta nemo at dolorem eveniet maxime ab labore est eligendi molestias aliquam sapiente"
        }

### PUT
Update a Post

    Sample Request:
    [PUT] http://jsonplaceholder.apiary.io/v1/posts/4

+ Request (application/json)

        { "id": 4, "body": "baz' }

+ Response 200 (application/json)

        {
            "userId": 1,
            "id": 4,
            "title": "foo",
            "body": "baz"
        }

### DELETE
Deleting a Post

    Sample Request:
    [DELETE] http://jsonplaceholder.apiary.io/v1/posts/4

+ Response 204


# Group Albums
TODO: Albums Resource
    http://jsonplaceholder.apiary.io/v1/albums/1

# Group Comments
TODO: Comments Resource
    http://jsonplaceholder.apiary.io/v1/comments/1

# Group Photos
TODO: Photos Resource
    http://jsonplaceholder.apiary.io/photos/1

# Group Todos
TODO: Todos Resource
    http://jsonplaceholder.apiary.io/v1/todos/1

# Group Users
TODO: User Resource
    http://jsonplaceholder.apiary.io/v1/users/1


# Group Additional Information

## Allowed HTTPs requests:

    [POST]:     To create a resource
    [GET]:      To read a resource or list of resources
    [PUT]:      To update a resource
    [DELETE]:   To delete a resource

## Description Of Usual Server Responses

    - 200 `OK` - the request was successful.
    - 201 `Created` - the request was successful and a resource was created.
    - 204 `No Content` - the request was successful but there is no representation to return (i.e. the response is empty).
    - 400 `Bad Request` - the request could not be understood or was missing required parameters.
    - 401 `Unauthorized` - authentication failed or user doesn't have permissions for requested operation.
    - 403 `Forbidden` - access denied.
    - 404 `Not Found` - resource was not found
    - 405 `Method Not Allowed` - requested method is not supported for resource.
    - 409 `Conflict` - the request could not be completed due to a conflict with the current state of the resource.

## Suggestions for API Design

    - Be RESTful
    - Only 2 URLs
    - No verbs
    - Use nouns as plurals
    - Concrete over abstract resources
    - Follow JavaScript naming conventions
    - Sweep complexity behind the '?'
    - Borrow from leading APIs
    - Account for exceptional clients
    - Add virtualization layer

    (Excerpt from API Design by Apigee)

## Postman REST Client collection

    https://www.getpostman.com/collections/3452686771065a7c2762

## API testing

### [Dredd](https://github.com/apiaryio/dredd) enables documentation-driven development and test-driven development of your APIs.

Check this blog post: [How To Test REST API with API Blueprint and Dredd](http://blog.apiary.io/2013/10/17/How-to-test-api-with-api-blueprint-and-dredd/)


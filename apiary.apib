FORMAT: X-1A
HOST: https://www.google.com

# JSONPlaceholder Blueprint

### Available resources:
- **Posts:** http://jsonplaceholder.apiary.io/v1/posts/1
- **TODO** - Albums: http://jsonplaceholder.apiary.io/v1/albums/1
- **TODO** - Comments: http://jsonplaceholder.apiary.io/v1/comments/1
- **TODO** - Photos: http://jsonplaceholder.apiary.io/v1/photos/1
- **TODO** - Todos: http://jsonplaceholder.apiary.io/v1/todos/1
- **TODO** - Users: http://jsonplaceholder.apiary.io/v1/users/1

### Credits
Inspired by [JSONPlaceholder](https://github.com/typicode/jsonplaceholder)

# Group Posts

## /v1/posts

### Creating Post [POST]
Creating a resource

Returns
    ```
    {
      "id": 134985902, // Random id
      "title": "foo",
      "body": "bar",
      "userId: 1
    }
    ```

    POST http://jsonplaceholder.apiary.io/v1/posts

+ Request JSON Message
    + Headers
    
            Accept: application/json

    + Body

            { "title": "foo", "body": "bar", "userId": 1 }


+ Response 201 (application/json)
    ```json
        {
          "id": 134985902,
          "title": "foo",
          "body": "bar",
          "userId": 1
        }
    ```

### Listing Posts [GET]
Listing resources

    GET http://jsonplaceholder.apiary.io/v1/posts

+ Request JSON Message
    + Headers

            Accept: application/json

+ Response 200 (application/json)
    ```json
        [
            {   
                "id":1,
                "title": "quas laboriosam ea","
                "body": "earum inventore sapiente\nerror nesciunt ut perferendis soluta",
                "userId": 1
            },
            {
                "id":2,
                "title": "natus omnis voluptas cumque et aliquam",
                "body": "sint delectus sed excepturi fuga exercitationem maiores dolor\niusto autem minus in officiis eaque laborum\naut ut a\nest ipsa soluta","use
                "userId": 2
            },
            {
                "id":3,
                "title": "distinctio ut ipsa voluptas ea voluptatem sequi",
                "body": "voluptatem esse illum\nnobis nisi sed numquam incidunt neque nulla sint\noptio quia rerum voluptas do"
                "userId": 3
            }
    ```

## /v1/posts/{id}

### Retrieve a Post [GET]
Showing a resource

    GET http://jsonplaceholder.apiary.io/v1/posts/1

+ Request JSON Message
    + Headers

            Accept: application/json

+ Parameters
    + id (required, integer) ... Post ID

+ Response 200 (application/json)
    ```json
    {
        "id": 1,
        "title": "quas laboriosam ea",
        "body": "earum inventore sapiente error nesciunt ut perferendis soluta suscipit dicta nemo at dolorem eveniet maxime ab labore est eligendi molestias aliquam sapiente",
        "userId": 1
    }
    ```

### Update a Post [PUT]
Updating a resource

    PUT http://jsonplaceholder.apiary.io/v1/posts/1

+ Request JSON Message
    + Headers

            Accept: application/json
    + Body

            { "id": 1, "title": "foo", "body": "bar', "userId": 1 }

+ Parameters
    + id (required, integer) ... Post ID

+ Response 200 (application/json)
    ```json
    {
        "id": 1,
        "title": "foo",
        "body": "bar",
        "userId": 1
    }
    ```

### Delete a Post [DELETE]
Deleting a resource

    DELETE http://jsonplaceholder.apiary.io/v1/posts/1

+ Request JSON Message
    + Headers

            Accept: application/json

+ Parameters
    + id (required, integer) ... Post ID

+ Response 200 (application/json)
    ```json
        { "message" : "deleted" }
    ```

# Group Albums
TODO: Albums Resource
    http://jsonplaceholder.apiary.io/v1/albums/1

# Group Comments
TODO: Comments Resource
    http://jsonplaceholder.apiary.io/v1/comments/1

# Group Photos
TODO: Photos Resource
    http://jsonplaceholder.apiary.io/photos/1

# Group Todos
TODO: Todos Resource
    http://jsonplaceholder.apiary.io/v1/todos/1

# Group Users
TODO: User Resource
    http://jsonplaceholder.apiary.io/v1/users/1


# Group Additional Information

## Allowed HTTPs requests:

    [POST]:     To create a resource
    [GET]:      To read a resource or list of resources
    [PUT]:      To update a resource
    [DELETE]:   To delete a resource

## Description Of Usual Server Responses

    - 200 `OK` - the request was successful.
    - 201 `Created` - the request was successful and a resource was created.
    - 204 `No Content` - the request was successful but there is no representation to return (i.e. the response is empty).
    - 400 `Bad Request` - the request could not be understood or was missing required parameters.
    - 401 `Unauthorized` - authentication failed or user doesn't have permissions for requested operation.
    - 403 `Forbidden` - access denied.
    - 404 `Not Found` - resource was not found
    - 405 `Method Not Allowed` - requested method is not supported for resource.
    - 409 `Conflict` - the request could not be completed due to a conflict with the current state of the resource.

## Suggestions for API Design

    - Be RESTful
    - Only 2 URLs
    - No verbs
    - Use nouns as plurals
    - Concrete over abstract resources
    - Follow JavaScript naming conventions
    - Sweep complexity behind the '?'
    - Borrow from leading APIs
    - Account for exceptional clients
    - Add virtualization layer

    (Excerpt from API Design by Apigee)

## Postman REST Client collection

    https://www.getpostman.com/collections/3452686771065a7c2762

## API testing

### [Dredd](https://github.com/apiaryio/dredd) enables documentation-driven development and test-driven development of your APIs.

Check this blog post: [How To Test REST API with API Blueprint and Dredd](http://blog.apiary.io/2013/10/17/How-to-test-api-with-api-blueprint-and-dredd/)

    $ dredd apiary.apib http://localhost:3000/
